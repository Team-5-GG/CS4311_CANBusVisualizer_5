"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BitUtils {
    bitGet(num, idx) {
        const bitField = this.dec2bin(num).split('');
        // Assumes least significant bit starts at the end of the array
        return bitField[idx];
    }
    bitSet(num, idx, val) {
        num[num.length - idx - 1] = val;
        return num;
    }
    bin2decSigned(bits) {
        const negative = bits[0] === '1';
        if (negative) {
            let inverse = '';
            for (let i = 0; i < bits.length; i++) {
                inverse += bits[i] === '0' ? '1' : '0';
            }
            return (parseInt(inverse, 2) + 1) * -1;
        }
        else {
            return parseInt(bits, 2);
        }
    }
    bin2dec(bin) {
        return parseInt(bin, 2);
    }
    dec2bin(dec) {
        const paddedBin = '000000000' + (dec >>> 0).toString(2);
        return paddedBin.substring(paddedBin.length - 8);
    }
}
exports.default = BitUtils;
//# sourceMappingURL=BitUtils.js.map
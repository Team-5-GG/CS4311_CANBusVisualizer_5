/**
 *
 * Global/generic types for library
 */
export declare type Signal = {
    name: string;
    multiplex: string | null;
    startBit: number;
    length: number;
    endianness: EndianType;
    signed: boolean;
    factor: number;
    offset: number;
    min: number;
    max: number;
    unit: string;
    receivingNodes: string[];
    description: string | null;
    valueTable: ValueTable | null;
};
export declare type Message = {
    name: string;
    id: number;
    dlc: number;
    sendingNode: string | null;
    signals: Map<string, Signal>;
    description: string | null;
};
export declare type Tokens = {
    [key: string]: Token;
};
export declare type Token = {
    name: string;
    dataFormat: RegExp;
};
export declare type DbcData = {
    version: string | null;
    messages: Map<string, Message>;
    description: string | null;
    busConfiguration: number | null;
    canNodes: string[];
    valueTables: Map<string, ValueTable> | null;
    attributes: Attributes | null;
};
export declare type ValueTable = Map<number, string>;
export declare type MessageRegex = {
    messageName: string;
    id: string;
    dlc: string;
    sendingNode: string;
};
export declare type SignalRegex = {
    name: string;
    plex: string;
    startBit: string;
    length: string;
    endian: string;
    signed: string;
    factor: string;
    offset: string;
    min: string;
    max: string;
    unit: string;
    receivingNodes: string;
};
export declare type VersionRegex = {
    version: string;
};
export declare type CanConfigRegex = {
    speed: string;
};
export declare type CanNodesRegex = {
    nodes: string;
};
export declare type DefinitionRegex = {
    definition: string;
};
export declare type CanFrame = {
    id: number;
    dlc: number;
    extended: boolean;
    payload: Uint8Array;
};
export declare type Attributes = {
    file: Attribute[] | null;
    signals: Attribute[] | null;
    messages: Attribute[] | null;
    nodes: Attribute[] | null;
};
export declare type Attribute = {
    name: string;
    dataType: string;
    value: string;
    options: string[];
};
export interface Config {
    defaultEndianness: string;
    overwriteFile: boolean;
    newFileOnWrite: boolean;
    overwriteMessages: boolean;
    overwriteSignals: boolean;
}
export declare type EndianType = 'Intel' | 'Motorola';

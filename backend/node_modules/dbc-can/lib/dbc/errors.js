"use strict";
/**
 *
 * Base exception and errors that program can throw
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignalDoesNotExist = exports.InvalidPayloadLength = exports.TokenError = exports.ParseError = exports.MessageDoesNotExist = exports.LineDoesNotContainToken = void 0;
/* tslint:disable:max-classes-per-file */
/* tslint:disable:variable-name */
class LineDoesNotContainToken extends Error {
    constructor(message) {
        super(message);
        this.__proto__ = Error;
        Object.setPrototypeOf(this, LineDoesNotContainToken.prototype);
    }
}
exports.LineDoesNotContainToken = LineDoesNotContainToken;
class MessageDoesNotExist extends Error {
    constructor(message) {
        super(message);
        this.__proto__ = Error;
        Object.setPrototypeOf(this, MessageDoesNotExist.prototype);
    }
}
exports.MessageDoesNotExist = MessageDoesNotExist;
class ParseError extends Error {
    constructor(message) {
        super(message);
        this.__proto__ = Error;
        Object.setPrototypeOf(this, ParseError.prototype);
    }
}
exports.ParseError = ParseError;
class TokenError extends Error {
    constructor(message) {
        super(message);
        this.__proto__ = Error;
        Object.setPrototypeOf(this, TokenError.prototype);
    }
}
exports.TokenError = TokenError;
class InvalidPayloadLength extends Error {
    constructor(message) {
        super(message);
        this.__proto__ = Error;
        Object.setPrototypeOf(this, InvalidPayloadLength.prototype);
    }
}
exports.InvalidPayloadLength = InvalidPayloadLength;
class SignalDoesNotExist extends Error {
    constructor(message) {
        super(message);
        this.__proto__ = Error;
        Object.setPrototypeOf(this, SignalDoesNotExist.prototype);
    }
}
exports.SignalDoesNotExist = SignalDoesNotExist;
//# sourceMappingURL=errors.js.map
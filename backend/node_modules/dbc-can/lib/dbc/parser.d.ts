import { Tokens, Message, Signal, MessageRegex, SignalRegex, VersionRegex, CanConfigRegex, CanNodesRegex, DbcData, DefinitionRegex, ValueTable } from './types';
declare class Parser {
    tokens: Tokens;
    constructor();
    private addToken;
    /**
     *
     * @param line Raw line from dbc file
     * @returns Object
     */
    protected parseLine(line: string): {
        line: string;
        baseToken: any;
        regexMatch: any;
    };
    /**
     *
     * @param lineInfo Info collected about an individual line parsed from basicTokenization()
     * @param data
     * @returns
     */
    protected parseLineFromBaseToken(lineInfo: any, data: DbcData): DbcData;
    protected assignToSigValTable(msg: Message, signalName: string, value: ValueTable): void;
    protected getSignalByNameFromMsg(msg: Message, name: string): Signal | undefined;
    protected getMessageByIdFromData(data: DbcData, id: number): Message | undefined;
    protected extractDefinition(obj: DefinitionRegex): Map<any, any>;
    protected parseMessage(obj: MessageRegex): Message;
    protected parseSignal(obj: SignalRegex): Signal;
    protected parseVersion(obj: VersionRegex): string;
    protected parseCanNodes(obj: CanNodesRegex): string[];
    protected parseCanConfiguration(obj: CanConfigRegex): number;
}
export default Parser;
